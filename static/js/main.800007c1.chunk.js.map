{"version":3,"sources":["ThumbnailCount.js","App.js","serviceWorker.js","index.js"],"names":["ThumbnailImages","_ref","imagesArr","thumbnailNumber","handleImageClick","style","thumbnailStyle","imgStyle","className","imgRadius","props","Object","objectWithoutProperties","Wrap","styled","withConfig","displayName","componentId","ImgWrap","getThumbnailWidth","imgStyleInner","objectFit","width","height","cursor","renderObj","arrangeMultipleImages","fillThumbnail","shownImage","length","react_default","a","createElement","assign","_","map","imgUrl","i","key","showExtraImagesFrame","extraImage","ThumbnailCount_ImageFrame","number","onClick","objectSpread","src","alt","range","item","defaultProps","ImageFrame","_ref2","ImageFrameWrap","images","imagesThumbnailNumber","slice","mapIndex","App","state","imgArr","currentImage","onThumbnailClick","imgName","_this","setState","_this$state","this","thumbnailSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.800007c1.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components/macro';\nimport _ from 'lodash';\n\nexport default function ThumbnailImages({ imagesArr, thumbnailNumber, handleImageClick, style, thumbnailStyle, imgStyle, imgRadius, className, ...props }) {\n    \n    const Wrap = styled('div')`\n        display: flex;\n        justify-content: space-between;\n    `;\n\n    const ImgWrap = styled('div')`\n        width: ${() => getThumbnailWidth(thumbnailNumber)};\n        position: relative;\n        overflow: hidden;\n        `;\n\n    const imgStyleInner = {\n        objectFit: 'cover', \n        width: '100%', \n        height: '100%',\n        cursor: 'pointer',\n    }\n\n    const renderObj = arrangeMultipleImages(imagesArr, thumbnailNumber);\n\n    const fillThumbnail = thumbnailNumber - renderObj.shownImage.length;\n\n    return (\n        <Wrap className={className} style={style} {...props}>\n            {_.map(renderObj.shownImage, (imgUrl, i) => (\n                <ImgWrap key={i} style={thumbnailStyle}>\n                    {\n                        showExtraImagesFrame(renderObj.extraImage, thumbnailNumber, i)  && (\n                            <ImageFrame number={renderObj.extraImage.length} onClick={() => handleImageClick(imgUrl)}/> )\n                    }\n                    <img\n                        onClick={() => {handleImageClick(imgUrl)}}\n                        style={{...imgStyleInner, ...imgStyle,}}\n                        src={imgUrl}\n                        alt=\"too good\"/>\n                </ImgWrap>\n            ))}\n            {_.map(_.range(fillThumbnail), (item,i) => <ImgWrap key={i} style={thumbnailStyle} />)}\n        </Wrap>\n    );\n}\n\nThumbnailImages.defaultProps = {\n    className: '',\n    imgRadius: 0,\n};\n\nvar ImageFrame = ({number, onClick}) => {\n\n    const ImageFrameWrap = styled('div')`\n        position: absolute;\n        background-color: rgba(0, 0, 0, 0.4);\n        font-size: 14px;\n        font-weight: bold;\n        color: #fff;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        cursor: pointer;        \n        top: 0;\n        bottom: 0;\n        left: 0;\n        right: 0;\n\n    `;\n\n    return  <ImageFrameWrap onClick={onClick}>\n        <span>+ {number + 1}</span>\n    </ImageFrameWrap>\n\n}\n\nvar arrangeMultipleImages = (images, imagesThumbnailNumber) => {\n    return {\n        shownImage : _.slice(images, 0, imagesThumbnailNumber),\n        extraImage : _.slice(images, imagesThumbnailNumber),\n    }\n}\n\nvar getThumbnailWidth = number => {\n    const ratio = 100 / (number + 1);\n    return ratio + \"%\";\n}\n\nvar showExtraImagesFrame = (extraImage, thumbnailNumber, mapIndex) => {\n    return (extraImage.length > 0) && (mapIndex === (thumbnailNumber - 1))\n}\n    ","import React, { Component } from 'react';\nimport ThumbnailCount from \"./ThumbnailCount\";\nclass App extends Component {\n\n  state = {\n    imgArr : [\n      '../images/baby.jpg',\n      '../images/bled.jpg',\n      '../images/cat.jpg',\n      '../images/colored-pencils.jpg',\n      '../images/happy.jpg',\n      '../images/night-bird.jpg',\n      '../images/mother.jpg',\n      '../images/mountain.jpg',\n      '../images/night.jpg',\n      '../images/ship.jpg',\n      '../images/skyscraper.jpg',\n      '../images/web.jpg'\n    ],\n    currentImage: '',\n\n  }\n\n  onThumbnailClick = imgName => {\n    this.setState({\n      currentImage : imgName\n    })\n  }\n\n\n  render() {\n    const { imgArr, currentImage, thumbnailSize } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"preview\">\n          <img src={currentImage} alt={currentImage}/>\n        </div>\n        <div className=\"container\">\n          <ThumbnailCount \n            imagesArr={imgArr}\n            thumbnailNumber={ 6 }\n            handleImageClick={this.onThumbnailClick}\n            // style={{height: thumbnailSize}}\n            // thumbnailStyle={{width: thumbnailSize,borderRadius: '4px'}}\n          />     \n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}